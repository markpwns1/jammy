
array = prototype!;

array.constructor = elements... :=> >> my._elements = elements;

array.new = elements... => array ...elements;

array.from_table = t => array ...t;

array.__index = key :=> 
    if type key == "number", my._elements #(key + 1) 
    else if key == "length", len my._elements
    else array #key;

array.__newindex = (key, value) :=> >> 
    if type key == "number", 
        if (key < 0) || (key > my.length), 
            error "Attempt to set out-of-bounds index in array: ${key} -- Valid bounds are [0, ${my.length})"
        else my._elements #(key + 1) = value
    else rawset(self, key, value);

array.__tostring = () :=> {
    let str = "[ ";
    let n = len my._elements;
    for i in range_inc n, {
        str = str .. tostring my._elements #i;
        if i < n, str = str .. ", ";
    };
    => str .. " ]";
};

array.count = () :=> len my._elements;

array.iter = () :=> {
    let i, n = 0, len my._elements;
    => () => {
        i = i + 1;
        if i <= n, => my._elements #i;
    };
};

array.ipairs = () :=> {
    let i, n = 0, len my._elements;
    => () => {
        i = i + 1;
        if i <= n, => (i, my._elements #i);
    };
};

array.first_index_of = item :=> >> 
    for i in range_inc len my._elements,
        if my._elements #i == item, => i - 1;

array.last_index_of = item :=> >> 
    for i in range_inc(len my._elements, 1, -1),
        if my._elements #i == item, => i - 1;

array.insert = (i, item) :=> >> table.insert(my._elements, i, item);

array.push_bottom = (i, item) :=> >> table.insert(my._elements, 1, item);

array.pop_bottom = (i, item) :=> >> table.remove(my._elements, 1);

array.push = item :=> {
    my._elements #(len my._elements + 1) = item;
    => item;
};

array.pop = () :=> {
    let n = len my._elements;
    let item = my._elements #n;
    my._elements #n = nil;
    => item;
};

array.remove_at = i :=> table.remove(my._elements, i + 1);

array.remove = item :=> >> for i, v in ipairs my._elements, if v == item, table.remove(my._elements, i);

array.contains = item :=> bool >> for _, v in ipairs my._elements, if item == v, => true;
array.has = array.contains;

array.get_elements = () :=> my._elements;

array.shallow_copy = () :=> array.from_table my._elements;

array.equal_to = (a, b) => {
    if len a._elements ~= len b._elements, => false;
    for i in range_inc len a._elements,
        if (a._elements #i) ~= (b.elements #i), => false;
    => true;
};

array.slice = (start_index, end_index) :=> {
    let sliced_table = tbl!;
    start_index = start_index + 1;

    if end_index == nil, end_index = len self._elements;

    let j = 1;
    for i in range_inc(start_index, end_index), {
        sliced_table #j = my._elements #i;
        j = j + 1;
    };

    => array.from_table sliced_table;
};

array.concat = (a, b) => {
    let c = a:shallow_copy!;
    let a_n = len a._elements;
    for i, v in b:ipairs!, c._elements #(a_n + i) = v;
    => c;
};

array.clear = () :=> >> for i in range_inc len my._elements, my._elements #i = nil;

array.first = () :=> my._elements #1;

array.last = () :=> my._elements #(len my._elements);

array.head = array.first;

array.tail = () :=> self:slice 1;

array.get = i :=> my._elements #(i + 1);

array.set_elements = t :=> {
    let t_n, my_n = len t._elements, len my._elements;
    let i = 1;

    while i <= t_n, {
        my._elements #i = t._elements #i;
        i = i + 1;
    };

    while i <= my_n, {
        my._elements #i = nil;
        i = i + 1;
    };
};

array.each_i = f :=> >> for i, v in ipairs(my._elements), f(i, v); 
array.each = f :=> >> for i, v in ipairs(my._elements), f v; 

array.set = (i, item) :=> {
    if (i < 0) || (i >= my.length), 
        error "Attempt to set out-of-bounds index in array: ${i} -- Valid bounds are [0, ${my.length})"
    else {
        my._elements #(i + 1) = item;
        => item;
    };
};

