/** import_parameters {
    "set": [ "array", "typechecks" ]
} */

use "std/types.jam";

prototype array {
    
    constructor: elements... :=> >> @_elements = elements;

    new: elements... => array ...elements;

    is_array: a => ((type a) == "table") && a.__type && (a.__type == "array");

    from_table: t: table => array ...t;

    __index: key: exists :=> 
        if type key == "number", @_elements #(key + 1) 
        else if key == "length", len @_elements
        else array #key;

    __newindex: (key: exists, value) :=> >> 
        if type key == "number", 
            if (key < 0) || (key > @length), 
                error "Attempt to set out-of-bounds index in array: ${key} -- Valid bounds are [0, ${@length})"
            else @_elements #(key + 1) = value
        else rawset(@, key, value);

    __tostring: () :=> {
        let str = "[ ";
        let n = len @_elements;
        for i in range_inc n, {
            str = str .. tostring @_elements #i;
            if i < n, str = str .. ", ";
        };
        => str .. " ]";
    };

    count: () :=> len @_elements;

    iter: () :=> {
        let i, n = 0, len @_elements;
        => () => {
            i = i + 1;
            if i <= n, => @_elements #i;
        };
    };

    ipairs: () :=> {
        let i, n = 0, len @_elements;
        => () => {
            i = i + 1;
            if i <= n, => (i, @_elements #i);
        };
    };

    first_index_of: item :=> >> 
        for i in range_inc len @_elements,
            if @_elements #i == item, => i - 1;

    last_index_of: item :=> >> 
        for i in range_inc(len @_elements, 1, -1),
            if @_elements #i == item, => i - 1;

    insert: (i: number, item: exists) :=> >> table.insert(@_elements, i, item);

    push_bottom: (i: number, item: exists) :=> >> table.insert(@_elements, 1, item);

    pop_bottom: (i: number, item: exists) :=> >> table.remove(@_elements, 1);

    push: item: exists :=> {
        @_elements #(len @_elements + 1) = item;
        => item;
    };

    pop: () :=> {
        let n = len @_elements;
        let item = @_elements #n;
        @_elements #n = nil;
        => item;
    };

    remove_at: i: number :=> table.remove(@_elements, i + 1);

    remove: item: exists :=> >> for i, v in ipairs @_elements, if v == item, table.remove(@_elements, i);

    contains: item: exists :=> bool >> for _, v in ipairs @_elements, if item == v, => true;
    has: array.contains;

    get_elements: () :=> @_elements;

    shallow_copy: () :=> array.from_table @_elements;

    equal_to: (a: array, b: array) => {
        if len a._elements ~= len b._elements, => false;
        for i in range_inc len a._elements,
            if (a._elements #i) ~= (b.elements #i), => false;
        => true;
    };

    slice: (start_index: number, end_index: number?) :=> {
        let sliced_table = tbl!;
        start_index = start_index + 1;

        if end_index == nil, end_index = len @_elements;

        let j = 1;
        for i in range_inc(start_index, end_index), {
            sliced_table #j = @_elements #i;
            j = j + 1;
        };

        => array.from_table sliced_table;
    };

    concat: (a: array, b: array) => {
        let c = a:shallow_copy!;
        let a_n = len a._elements;
        for i, v in b:ipairs!, c._elements #(a_n + i) = v;
        => c;
    };

    clear: () :=> >> for i in range_inc len @_elements, @_elements #i = nil;

    first: () :=> @_elements #1;

    last: () :=> @_elements #(len @_elements);

    head: array.first;

    tail: () :=> @slice 1;

    get: i: number :=> @_elements #(i + 1);

    set_elements: t: table :=> {
        let t_n, my_n = len t._elements, len @_elements;
        let i = 1;

        while i <= t_n, {
            @_elements #i = t._elements #i;
            i = i + 1;
        };

        while i <= my_n, {
            @_elements #i = nil;
            i = i + 1;
        };
    };

    each_i: f: function :=> >> for i, v in ipairs @_elements, f(i, v); 
    each: f: function :=> >> for i, v in ipairs @_elements, f v; 

    set: (i: number, item) :=> {
        if (i < 0) || (i >= @length), 
            error "Attempt to set out-of-bounds index in array: ${i} -- Valid bounds are [0, ${@length})"
        else {
            @_elements #(i + 1) = item;
            => item;
        };
    };

    unpack: () :=> ...@_elements;

};

=> tbl (array, typechecks);
