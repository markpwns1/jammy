
use "std/types.jam";
use "std/table.jam";
use "std/iter.jam";

prototype set {

    constructor: elements... :=> {
        @_elements = { };
        for k, v in pairs elements, @_elements #v = true;
    };

    new: elements... => set ...elements;

    contains: e: exists :=> @_elements #e == true;
    has: set.contains;

    add: e: exists :=> >> @_elements #e = true;

    remove: e: exists :=> >> @_elements #e = nil;

    size: () :=> table.length @_elements;
    cardinality: set.size;

    strict_subset: (a: set, b: set) => {
        if a:size! >= b:size!, => false;
        for k, _ in pairs a._elements, if !(b._elements #k), => false;
        => true;
    };

    subset: (a: set, b: set) => {
        if a:size! > b:size!, => false;
        for k, _ in pairs a._elements, if !(b._elements #k), => false;
        => true;
    };

    equal_to: (a: set, b: set) => {
        if a:size! ~= b:size!, => false;
        for k, _ in pairs a._elements, if !(b._elements #k), => false;
        => true;
    };

    superset: (a: set, b: set) => b:subset a;
    strict_superset: (a: set, b: set) => b:strict_subset a;
    superset_eq: (a: set, b: set) => b:subset a;

    iter: () :=> {
        let elements = @to_table!;
        let n = len elements;
        let i = 0;
        => () => {
            i = i + 1;
            if i <= n, => elements #i;
        };
    };

    to_table: () :=> reduce({ }, tbl pairs @_elements, table.push);

    shallow_copy: () :=> set ...@to_table!;

    clear: () :=> >> for x in @iter!, @_elements #x = nil;

    set_elements: t: set :=> {
        @clear!;
        for item in t:iter!, @_elements #item = true;
    };

    __tostring: () :=> {
        let str = "{ ";
        let i, n = 0, table.length @_elements;
        for k, _ in pairs @_elements, {
            str = str .. tostring k;
            i = i + 1;
            if i < n, str = str .. ", ";
        };
        => str .. " }";
    };

    each: f: function :=> >> for k, v in pairs(@_elements), f k;

    union: (a: set, b: set) => {
        let c = a:shallow_copy!;
        for x in b:iter!, c._elements #x = true;
        => c;
    };

    intersect: (a: set, b: set) => {
        let c = set!;
        for x in a:iter!, if b._elements #x, c._elements #x = true;
        => c;
    };

    difference: (a: set, b: set) => {
        let c = a:shallow_copy!;
        for x in b:iter!, c._elements #x = nil;
        => c;
    };

    unpack: () :=> ...@to_table!;

};

export set;
