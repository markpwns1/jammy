
/** import_parameters {
    "set": [ "string" ],
    "append": "debug.setmetatable(\"\", { __index = function(t, k) return __env.string[k] end })"
} */

use "std/iter.jam";
use "std/types.jam";

let string_metatable = () => getmetatable "";

let string_mt = { 

    char_at: i: number [string_metatable!] :=> @sub(i, i);

    __index: key: exists [string_metatable!] :=>
        if type key == "number", @sub(key, key)
        else if key == "length", @len!
        else @ #key;

    substring: string.sub;
    slice: string.sub;

    concat: (a: string, b: string) => a .. b;

    contains: str: string [string_metatable!] :=> bool @find(str, 1, true);

    index_of: str: string [string_metatable!] :=> (tbl @find(str, 1, true)) #1;
    last_index_of: str: string [string_metatable!] :=> 1 + @len! - @reverse!:index_of str;

    ends_with: str: string [string_metatable!] :=> @sub(-str:len!, -1) == str;
    starts_with: str: string [string_metatable!] :=> @sub(1, str:len!) == str;

    match_all: str: string [string_metatable!] :=> table.from_iterator @gmatch str;

    pad_left: (total_length: number, char: string = " ") [string_metatable!] 
        :=> char:repeat_times (total_length - @len!) .. @;

    pad_right: (total_length: number, char: string = " ") [string_metatable!] 
        :=> @ .. char:repeat_times (total_length - @len!);

    repeat_times: n: number [string_metatable!] 
        :=> reduce("", tbl range_inc n, s => s .. @);

    escape_match: () [string_metatable!] :=> (tbl @gsub ("[%^%$%(%)%%%.%[%]%*%+%-%?]", "%%%1")) #1;

    replace_first: (original: string, replacement: string) [string_metatable!]
        :=> (tbl @gsub(original:escape_match!, replacement, 1)) #1;

    replace_all: (original: string, replacement: string) [string_metatable!]
        :=> @gsub(original:escape_match!, replacement);

    count_instances: str: string [string_metatable!] 
        :=> select(2, @gsub(str:escape_match!, str:escape_match!));

    split: separator: string [string_metatable!] :=> {
        let t = { };
        let i = @index_of separator;
        while i && (i < (@len! + 1)), {
            t #(len t + 1) = @slice (0, i - 1);
            @ = @slice(i + separator:len!);
            i = @index_of separator;
        };
        t #(len t + 1) = @;
        => t;
    };

    trim_left: () [string_metatable!] :=> @match "^%s*(.-)$";
    trim_right: () [string_metatable!] :=> @match "^(.-)%s*$";
    trim: () [string_metatable!] :=> @match "^%s*(.-)%s*$";

    chars: () [string_metatable!] :=> 
        reduce({ }, tbl range_inc @len!, (t, i) => >> t #i = @sub(i, i));

    iter: () [string_metatable!] :=> {
        let i, n = 0, @len!;
        => () => {
            i = i + 1;
            if i <= n, => @sub(i, i);
        };
    };

    ipairs: () [string_metatable!] :=> {
        let i, n = 0, @len!;
        => () => {
            i = i + 1;
            if i <= n, => (i, @sub(i, i));
        };
    };
};

=> tbl string_mt;

