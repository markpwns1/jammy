
let primitives = {
    nil: true,
    number: true,
    string: true,
    boolean: true,
    table: true,
    thread: true,
    userdata: true,
    function: true
};

let __typeerror = (i, v, e) 
    => error("bad argument #${i} to ${debug.getinfo(3, "nl").name} (${e} expected, got ${type v})", 3);

let __match_type = (c, v, t) =>
    if primitives #t, type v == t
    else c && c #t && ((c #t) v);

let __typecheck_arg = (c, i, v, t) => >> if !__match_type(c, v, t), __typeerror(i, v, t);

let __typecheck_arg_optional = (c, i, v, t) => 
    >> if (v ~= nil) && !__match_type(c, v, t), __typeerror(i, v, t .. " or nil");

let __typecheck_arg_union = (c, i, v, ts) => {
    for _, t in ipairs ts, if __match_type(c, v, t), => true;
    __typeerror(i, v, table.concat(ts, " or "));
};

let __typecheck_arg_union_optional = (c, i, v, ts) => {
    if v == nil, => true;
    for _, t in ipairs ts, if __match_type(c, v, t), => true;
    __typeerror(i, v, table.concat(ts, " or ") .. " or nil");
};

let types = {
    subclass_of: proto: table => arg => (type arg == "table") && (arg.__class == proto);
    has_metatable: t: table => arg => has_metatable(arg, t);
};

typechecks.exists = typechecks.exists || (x => x ~= nil);
typechecks.int = typechecks.int || (x => (type x == "number") && (math.fmod(x, 1) == 0));
typechecks.positive = typechecks.positive || (x => (type x == "number") && (math.fmod(x, 1) == 0) && x >= 0);
typechecks.natural = typechecks.natural || (x => (type x == "number") && (math.fmod(x, 1) == 0) && x > 0);
typechecks.callable = typechecks.callable || (x => (type x == "function") || ((type x == "table") && {
    let mt = getmetatable x;
    => (type mt == "table") && (type mt.__call == "function");
}));

prototype type_advanced {
    constructor: (is_unchecked, is_optional, types...) :=> {
        @is_unchecked = is_unchecked;
        @is_optional = is_optional || is_unchecked;
        @types = types || tbl!;
    };

    check: (c, v) :=> {
        if @is_unchecked, => true;
        if @is_optional && (v == nil), => true;
        for i, t in ipairs @types, if __match_type(c, v, t), => true;
    };
};

export __match_type;
export __typecheck;
export __typecheck_arg;
export __typecheck_arg_optional;
export __typecheck_arg_union;
export __typecheck_arg_union_optional;
export types;
export type_advanced;
