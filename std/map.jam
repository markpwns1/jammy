
use "std/iter.jam";
use "std/types.jam";
use "std/table.jam";

prototype map {

    constructor: (t: table = { }) :=> >> @_elements = t;

    set: (k: exists, v) :=> >> @_elements #k = v;
    get: k: exists :=> @_elements #k;
    has: k: exists :=> bool @_elements #k;
    remove: k: exists :=> >> @_elements #k = nil;
    clear: () :=> >> for k, v in pairs @_elements, @_elements #k = nil;

    size: () :=> reduce(0, tbl pairs @_elements, n => n + 1);
    keys: () :=> reduce({ }, tbl pairs @_elements, table.push);
    values: () :=> reduce({ }, tbl pairs @_elements, (t, k, v) => >> t #(len t + 1) = v);

    to_table: () :=> reduce({ }, tbl pairs @_elements, table.set);
    shallow_copy: () :=> map @to_table!;
    pairs: () :=> pairs @_elements;
    set_elements: t: table :=> {
        @clear!;
        for k, v in pairs t, @_elements #k = v;
    };

    each: f: function :=> >> for k, v in pairs @_elements, f k;
    merge: (a: map, b: map) => reduce(a:shallow_copy!, tbl pairs b._elements, table.set);

};

export map;
